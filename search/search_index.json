{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Taller de Godot","text":"<p>En la siguiente p\u00e1gina, puedes encontrar toda la informaci\u00f3n acerca del taller de introducci\u00f3n a Godot realizado el d\u00eda 21 de Junio de 2025 en la Open South Code.</p> <p>En las siguientes p\u00e1ginas, podr\u00e1s encontrar informaci\u00f3n sobre como crear un sencillo videojuego utilizando el motor de videojuegos libre Godot.</p> <p>Utiliza el men\u00fa de la izquierda para ver cada uno de los apartados de este taller.</p> <p>Info</p> <p>Todo el contenido de esta web, esta publicado como Creative Commons:</p> <p>Taller Godot \u00a9 2025 by Make Classic Games is licensed under CC BY-SA 4.0</p>"},{"location":"character/","title":"Jugador","text":"<p>Una vez vista la escena principal, vamos a ver como crear nuestro jugador. En primer lugar, veremos los nodos y la configuraci\u00f3n de estos; y posteriormente comenzaremos a ver como mover nuestro jugador con los controles y Scripting.</p> <p>Vamos a crear una nueva escena llamada <code>Player</code>. Recuerda guardar la escena con el nombre <code>player.tscn</code>. El nodo principal de esta escena ser\u00e1 un <code>CharacterBody2D</code>, que nos permitir\u00e1 gestionar el movimiento y las colisiones del jugador de forma sencilla en Godot. Este nodo servir\u00e1 como base para a\u00f1adir otros nodos necesarios, como sprites, colisionadores y scripts que controlar\u00e1n el comportamiento del jugador.</p>"},{"location":"character/#nodos-del-jugador","title":"Nodos del jugador","text":"<p>Para configurar los nodos b\u00e1sicos del jugador, sigue estos pasos:</p> <ol> <li> <p>A\u00f1adir un nodo Sprite2D:</p> <ul> <li>Haz clic derecho sobre el nodo <code>CharacterBody2D</code> y selecciona A\u00f1adir nodo hijo.</li> <li>Busca y selecciona <code>Sprite2D</code>.</li> <li>En el panel de propiedades, asigna la textura que representar\u00e1 al jugador en la propiedad Texture (puedes arrastrar una imagen desde el panel de recursos; por ejemplo <code>ship_002.png</code>).</li> <li>Ajusta la propiedad Offset si necesitas centrar el sprite respecto al nodo principal.</li> </ul> </li> <li> <p>A\u00f1adir un nodo CollisionShape2D:</p> <ul> <li>Haz clic derecho sobre el nodo <code>CharacterBody2D</code> y selecciona A\u00f1adir nodo hijo.</li> <li>Busca y selecciona <code>CollisionShape2D</code>.</li> <li>En el panel de propiedades, selecciona una forma para la colisi\u00f3n en la propiedad Shape (por ejemplo, <code>RectangleShape2D</code>).</li> <li>Ajusta el tama\u00f1o y la posici\u00f3n de la forma para que cubra correctamente el sprite del jugador.</li> </ul> </li> </ol> <p>La jerarqu\u00eda de nodos deber\u00eda verse as\u00ed:</p> <pre><code>Player (CharacterBody2D)\n\u251c\u2500\u2500 Sprite2D\n\u2514\u2500\u2500 CollisionShape2D\n</code></pre> <p>Con esto, tu jugador tendr\u00e1 una representaci\u00f3n visual y una forma de colisi\u00f3n b\u00e1sica lista para detectar interacciones en el juego.</p> <p></p>"},{"location":"collisions/","title":"Colisiones","text":"<p>Para acabar, ya solo queda ver las colisiones; las colisiones en un juego es cuando 2 o m\u00e1s objetos interactuan por estar dentro del mismo espacio.</p> <p>Como has podido ver, hemos creado durante este taller, una serie de \u00e1reas para poder marcar la superficie de colisi\u00f3n.</p> <p>En este apartado, vamos a ver como utilizar estas superficies.</p>"},{"location":"collisions/#areas","title":"Areas","text":"<p>Como hemos podido ver en apartados anteriores, hemos utilizado se\u00f1ales; por lo que de igual forma, vamos a utilizar las se\u00f1ales dentro de un nodo.</p> <p>Vamos a utilizar la escena <code>Bullet</code> y seleccionaremos el nodo principal <code>Area2D</code>; veremos en el inspector que hay una se\u00f1al llamada <code>area_entered</code> esta se\u00f1al se lanza al entrar un objeto o un area dentro del area designada. </p> <p>Al hacer doble click, podremos crear una nueva funci\u00f3n llamada <code>_on_area_entered</code>; que a\u00f1adiremos el siguiente c\u00f3digo:</p> <pre><code>func _on_area_entered(area: Area2D) -&gt; void:\n    if area.is_in_group(\"enemy\"):\n        queue_free()\n        area.queue_free()\n</code></pre> <p>Una vez terminado esto, ya podremos ver nuestro juego funcionando.</p> <p>Espero que hayas disfrutado de este taller y te invito a continuar aprendiendo.</p>"},{"location":"enemy/","title":"Enemigo","text":"<p>Ahora vamos a crear el nodo enemigo para posteriormente utilizarlo en la escena principal.</p> <p>En este caso, vamos a crear una nueva escena llamada <code>enemy.tscn</code>; que contendr\u00e1 un nodo principal de tipo <code>Area2D</code>; y tendr\u00e1 un nodo <code>Sprite2D</code> y un nodo <code>CollisionShape2D</code>.</p> <p>Para a\u00f1adir una textura al nodo <code>Sprite2D</code>, selecciona el nodo en el panel de la escena y, en el panel de propiedades, busca la propiedad Texture. Haz clic en el icono de carpeta y selecciona la imagen llamada <code>ship_0014.png</code> desde tu sistema de archivos. Otra propiedad que debemos establecer es la propiedad <code>FlipV</code> dentro de la categoria <code>Offset</code>.</p> <p>Para el nodo <code>CollisionShape2D</code>, selecciona el nodo y, en la propiedad Shape, haz clic en \"empty\" y elige la forma que mejor se adapte al contorno de tu enemigo (por ejemplo, RectangleShape2D o CircleShape2D). Ajusta el tama\u00f1o y la posici\u00f3n del \u00e1rea de colisi\u00f3n para que coincida con la imagen del enemigo.</p> <p></p>"},{"location":"enemy/#script","title":"Script","text":"<p>Vamos a crear un nuevo script para el nodo principal <code>Area2D</code> haciendo clic derecho sobre el nodo y seleccionando Attach Script. Aseg\u00farate de que el script se guarde con el nombre <code>enemy.gd</code> en la misma carpeta que la escena. Este script te permitir\u00e1 programar el comportamiento del enemigo, como su movimiento o interacci\u00f3n con otros nodos.</p> <p>El script contendr\u00e1 lo siguiente:</p> <pre><code>@export var speed = 150\n\nfunc _process(delta: float) -&gt; void:\n    position.y += speed*delta\n    if position.y &gt; 800:\n        queue_free()\n</code></pre>"},{"location":"firststeps/","title":"Primeros pasos con Godot","text":"<p>Veamos los primeros pasos en Godot.</p>"},{"location":"firststeps/#crear-un-nuevo-proyecto-en-godot","title":"Crear un nuevo proyecto en Godot","text":"<ol> <li>Abre Godot Engine: Inicia la aplicaci\u00f3n Godot en tu computadora.</li> <li>Haz clic en \"Nuevo proyecto\": Selecciona la opci\u00f3n para crear un nuevo proyecto.</li> <li>Asigna un nombre y una ubicaci\u00f3n: Escribe el nombre de tu proyecto y elige la carpeta donde se guardar\u00e1.</li> <li>Selecciona la plantilla: Puedes elegir una plantilla vac\u00eda o importar un proyecto existente.</li> <li> <p>Selecciona un Renderizador: Puedes elegir un renderizador dependiendo del tipo de juego y recursos que necesites.</p> </li> <li> <p>Haz clic en \"Crear y editar\": Esto abrir\u00e1 el editor de Godot con tu nuevo proyecto listo para usar.</p> </li> </ol>"},{"location":"firststeps/#renderizador","title":"Renderizador","text":"<p>Godot ofrece varios renderizadores, cada uno adaptado a diferentes necesidades y plataformas:</p> <ul> <li>Forward+: Es el renderizador por defecto en Godot 4. Ofrece gr\u00e1ficos avanzados, iluminaci\u00f3n din\u00e1mica y efectos modernos. Recomendado para juegos de escritorio con altos requisitos visuales.</li> <li>Mobile: Optimizado para dispositivos m\u00f3viles. Consume menos recursos y es ideal para juegos que se ejecutar\u00e1n en tel\u00e9fonos o tabletas.</li> <li>Compatibility: Pensado para hardware antiguo o sistemas con capacidades gr\u00e1ficas limitadas. Sacrifica calidad visual para asegurar la m\u00e1xima compatibilidad.</li> </ul> <p></p>"},{"location":"firststeps/#estructura-basica-del-proyecto","title":"Estructura b\u00e1sica del proyecto","text":"<p>Una vez creado el prioyecto, podemos ver la estructura b\u00e1sica del mismo y de como suele ordenarse:</p> <ul> <li><code>project.godot</code>: Archivo principal de configuraci\u00f3n del proyecto.</li> <li><code>scenes/</code>: Carpeta recomendada para guardar tus escenas.</li> <li><code>scripts/</code>: Carpeta recomendada para tus scripts de c\u00f3digo.</li> <li><code>assets/</code>: Carpeta para im\u00e1genes, sonidos y otros recursos.</li> </ul>"},{"location":"install/","title":"Instalaci\u00f3n de Godot","text":"<p>La instalaci\u00f3n de Godot es sencilla y no requiere procesos complejos. A continuaci\u00f3n se detallan los pasos para instalar Godot en los sistemas operativos m\u00e1s comunes, as\u00ed como las diferencias entre las versiones est\u00e1ndar (GDScript) y las versiones con soporte para C# (Mono).</p>"},{"location":"install/#instalacion-en-windows","title":"Instalaci\u00f3n en Windows","text":"<ol> <li>Ve al sitio oficial de Godot Engine.</li> <li>Descarga la versi\u00f3n est\u00e1ndar (<code>.zip</code>) o la versi\u00f3n con soporte Mono si necesitas C#.</li> <li>Extrae el archivo descargado en una carpeta de tu elecci\u00f3n.</li> <li>Ejecuta el archivo <code>Godot_vX.X.X_stable_win64.exe</code> para iniciar el editor.</li> </ol> <p>Info</p> <p>No es necesaria instalaci\u00f3n adicional, pero aseg\u00farate de tener los drivers de tu tarjeta gr\u00e1fica actualizados.</p>"},{"location":"install/#instalacion-en-macos","title":"Instalaci\u00f3n en macOS","text":"<ol> <li>Accede a la p\u00e1gina de descargas de Godot.</li> <li>Descarga el archivo <code>.zip</code> correspondiente a tu sistema.</li> <li>Extrae el contenido y mueve la aplicaci\u00f3n <code>Godot.app</code> a la carpeta <code>Aplicaciones</code>.</li> <li>Si macOS bloquea la ejecuci\u00f3n, haz clic derecho en <code>Godot.app</code> y selecciona \"Abrir\".</li> </ol> <p>Info</p> <p>Puede ser necesario permitir la ejecuci\u00f3n desde \"Preferencias del Sistema\" &gt; \"Seguridad y privacidad\".</p>"},{"location":"install/#instalacion-en-linux","title":"Instalaci\u00f3n en Linux","text":"<ol> <li>Dir\u00edgete a la secci\u00f3n de descargas para Linux.</li> <li>Descarga el archivo ejecutable (<code>.x86_64</code>).</li> <li>Da permisos de ejecuci\u00f3n al archivo:     <code>bash     chmod +x Godot_vX.X.X_stable_linux.x86_64</code></li> <li>Ejecuta el archivo desde la terminal o haciendo doble clic.</li> </ol>"},{"location":"install/#instalacion-usando-flatpak-opcional","title":"Instalaci\u00f3n usando Flatpak (opcional)","text":"<pre><code>flatpak install flathub org.godotengine.Godot\nflatpak run org.godotengine.Godot\n</code></pre>"},{"location":"install/#requisitos-adicionales","title":"Requisitos adicionales","text":"<ul> <li>Aseg\u00farate de tener instalados los controladores gr\u00e1ficos m\u00e1s recientes.</li> <li>Para Mono, instala tambi\u00e9n el runtime de .NET.</li> </ul>"},{"location":"interface/","title":"Interfaz de Godot","text":""},{"location":"interface/#elementos-basicos-de-la-interfaz-de-usuario-de-godot","title":"Elementos b\u00e1sicos de la Interfaz de Usuario de Godot","text":"<p>La interfaz de Godot est\u00e1 compuesta por varios paneles y herramientas que facilitan el desarrollo de videojuegos. A continuaci\u00f3n se describen los elementos principales:</p>"},{"location":"interface/#1-barra-de-menu-principal","title":"1. Barra de Men\u00fa Principal","text":"<p>Contiene opciones como Archivo, Editar, Escena, Proyecto y Ayuda. Desde aqu\u00ed se accede a funciones generales del editor.</p> <p></p>"},{"location":"interface/#11-modos-de-la-interfaz","title":"1.1 Modos de la Interfaz","text":"<p>Godot ofrece varios modos de trabajo, accesibles desde la parte superior de la interfaz. Cada modo est\u00e1 dise\u00f1ado para tareas espec\u00edficas:</p> <ul> <li>2D: Permite editar escenas y nodos en dos dimensiones, ideal para juegos y aplicaciones 2D.</li> <li>3D: Proporciona herramientas para trabajar con escenas y objetos tridimensionales.</li> <li>Script: Abre el editor de scripts para programar la l\u00f3gica del juego utilizando GDScript o C#.</li> <li>Game: Ejecuta el juego o escena actual para probar su funcionamiento.</li> <li>AssetLib: Da acceso a la biblioteca de recursos en l\u00ednea, donde puedes descargar assets y complementos para tu proyecto.</li> </ul> <p></p>"},{"location":"interface/#2-barra-de-herramientas","title":"2. Barra de Herramientas","text":"<p>Permite acceder r\u00e1pidamente a herramientas como mover, rotar, escalar y reproducir la escena.</p> <p></p>"},{"location":"interface/#3-arbol-de-escena","title":"3. \u00c1rbol de Escena","text":"<p>Muestra la jerarqu\u00eda de nodos de la escena actual. Aqu\u00ed puedes seleccionar, organizar y modificar nodos.</p> <p></p>"},{"location":"interface/#4-inspector","title":"4. Inspector","text":"<p>Permite ver y modificar las propiedades del nodo seleccionado.</p> <p></p>"},{"location":"interface/#5-vista-principal","title":"5. Vista Principal","text":"<p>Es el \u00e1rea central donde se visualiza y edita la escena, tanto en 2D como en 3D.</p> <p></p>"},{"location":"interface/#6-panel-de-recursos","title":"6. Panel de Recursos","text":"<p>Muestra los archivos y recursos del proyecto, como scripts, im\u00e1genes y escenas.</p> <p></p>"},{"location":"interface/#7-consola-de-salida","title":"7. Consola de Salida","text":"<p>Muestra mensajes, advertencias y errores generados por el motor o los scripts.</p> <p></p>"},{"location":"intro/","title":"Introducci\u00f3n a Godot","text":"<p>Godot es un motor de desarrollo de videojuegos libre y de c\u00f3digo abierto, dise\u00f1ado para crear juegos 2D y 3D de manera eficiente y flexible. Su interfaz intuitiva y su potente sistema de nodos permiten a desarrolladores de todos los niveles construir proyectos interactivos sin depender de herramientas propietarias.</p> <p>Entre sus caracter\u00edsticas destacan:</p> <ul> <li>Multiplataforma: Permite exportar juegos a Windows, Linux, macOS, Android, iOS, HTML5 y m\u00e1s.</li> <li>Lenguajes de programaci\u00f3n: Soporta GDScript (su propio lenguaje), C#, C++ y visual scripting.</li> <li>Editor personalizable: El editor de Godot es completamente personalizable y puede adaptarse a distintos flujos de trabajo.</li> <li>Comunidad activa: Al ser open source, cuenta con una comunidad global que contribuye constantemente a su mejora.</li> </ul> <p>Godot es ideal tanto para principiantes como para desarrolladores experimentados que buscan una alternativa libre y potente para crear videojuegos.</p> <p></p>"},{"location":"main_scene/","title":"Escena Principal","text":"<p>La escen principal, ser\u00e1 nuestro contenedor donde estar\u00e1n los elementos del juego e incluso otras escenas. Algunas las crearemos en el propio editor, otras las crearemos en tiempo de ejecuci\u00f3n.</p> <p>Como hemos comentado, las escenas contienen Nodos que pueden ser propios del editor, e incluso otras escenas.</p> <p>En primer lugar, vamos a crear la escena principal; haciendo click en el men\u00fa escena-&gt; Nueva escena.</p> <p>Nos crear\u00e1 una escena vacia, y en la parte izquierda en el \u00e1rbol de nodos nos pedir\u00e1 que seleccionemos el nodo inicial.</p> <p>Seleccionaremos Nodo 2D; para crear como nodo inicial un Nodo 2D; recuerda que puedes trabajar en 2D y 3D pero en este caso nuestro juego ser\u00e1 integramente en 2D.</p> <p></p> <p>Una vez hecho esto, guardaremos nuestra escena como \"main.tscn\" usando el men\u00fa Escena-&gt;Guardar Escena como...</p>"},{"location":"main_scene/#anadir-nodos","title":"A\u00f1adir nodos","text":"<p>Para a\u00f1adir nuevos nodos a la escena, aseg\u00farate de tener seleccionado el nodo principal (Nodo 2D) en el \u00e1rbol de nodos. Luego, haz clic en el bot\u00f3n \"+\" que aparece encima del \u00e1rbol de nodos.</p> <p>En la ventana de b\u00fasqueda que se abre, escribe <code>Sprite2D</code> y selecci\u00f3nalo para a\u00f1adirlo como hijo del nodo principal. Este nodo te permitir\u00e1 mostrar im\u00e1genes en pantalla, como el personaje o elementos del juego.</p> <p>Repite el proceso para a\u00f1adir un nodo <code>Timer</code>. Busca <code>Timer</code> en la ventana de nodos y a\u00f1\u00e1delo como hijo del nodo principal. El nodo <code>Timer</code> te servir\u00e1 para gestionar eventos temporizados, como contar el tiempo o ejecutar acciones cada cierto intervalo.</p> <p>Al finalizar, tu \u00e1rbol de nodos deber\u00eda verse as\u00ed:</p> <pre><code>Nodo2D\n\u251c\u2500\u2500 Sprite2D\n\u2514\u2500\u2500 Timer\n</code></pre> <p>Puedes configurar las propiedades de cada nodo seleccion\u00e1ndolos y usando el panel de propiedades a la derecha.</p>"},{"location":"main_scene/#fondo","title":"Fondo","text":"<p>Vamos a a\u00f1adir un fondo para nuestro juego.</p> <p>Para a\u00f1adir una imagen de fondo, selecciona el nodo <code>Sprite2D</code> que creaste previamente. En el panel de propiedades, busca la propiedad Texture. Haz clic en el icono de carpeta junto a Texture y selecciona el archivo <code>space.png</code> desde tu sistema de archivos o la carpeta de recursos del proyecto.</p> <p>Esto har\u00e1 que el nodo <code>Sprite2D</code> muestre la imagen <code>space.png</code> como fondo de la escena. Puedes ajustar la posici\u00f3n del sprite usando las propiedades de Transform si es necesario.</p> <p>Tu \u00e1rbol de nodos seguir\u00e1 igual, pero ahora el nodo <code>Sprite2D</code> mostrar\u00e1 la textura seleccionada:</p> <pre><code>Nodo2D\n\u251c\u2500\u2500 Sprite2D (Texture: space.png)\n\u2514\u2500\u2500 Timer\n</code></pre>"},{"location":"main_scene/#primera-ejecucion","title":"Primera ejecuci\u00f3n","text":"<p>Para ejecutar tu juego por primera vez en Godot, haz clic en el bot\u00f3n Reproducir (el icono de \u25b6\ufe0f en la esquina superior derecha) o presiona F5 en tu teclado.</p> <p>La primera vez que ejecutes el proyecto, Godot te preguntar\u00e1 qu\u00e9 escena quieres usar como principal. Selecciona la escena que acabas de crear y guardar, por ejemplo, <code>main.tscn</code>. Haz clic en Aceptar para confirmar tu elecci\u00f3n.</p> <p>Godot recordar\u00e1 esta configuraci\u00f3n y, a partir de ahora, siempre ejecutar\u00e1 esa escena al iniciar el juego, a menos que cambies la escena principal en la configuraci\u00f3n del proyecto.</p> <p>\u00a1Listo! Ahora deber\u00edas ver tu escena principal en ejecuci\u00f3n, mostrando el fondo que configuraste.</p> <p></p>"},{"location":"movement/","title":"Movimiento","text":"<p>Vamos a pasar a dar movimiento a nuestro jugador por lo que necesitaremos en primer lugar, establecer los controles de nuestro juego y por otro lado, ya pasaremos a crear nuestro primer Script.</p>"},{"location":"movement/#mapeo-de-controles","title":"Mapeo de Controles","text":"<p>En Godot, puedes mapear los controles del juego desde el men\u00fa Proyecto &gt; Configuraci\u00f3n del Proyecto &gt; Entrada (Input Map). Aqu\u00ed puedes crear nuevas acciones y asociarlas a teclas espec\u00edficas del teclado.</p> <p></p> <p>Para este caso, debes asegurarte de que las acciones <code>\"ui_right\"</code>, <code>\"ui_left\"</code>, <code>\"ui_up\"</code> y <code>\"ui_down\"</code> est\u00e9n asociadas a las teclas de direcci\u00f3n del teclado (flechas). Adem\u00e1s, la acci\u00f3n <code>\"ui_accept\"</code> debe estar asociada a la barra espaciadora.</p> <ol> <li>Abre el men\u00fa Input Map.</li> <li>A\u00f1ade las acciones mencionadas si no existen.</li> <li>Haz clic en el bot\u00f3n Agregar tecla junto a cada acci\u00f3n y selecciona la tecla correspondiente:<ul> <li><code>\"ui_right\"</code>: Flecha derecha</li> <li><code>\"ui_left\"</code>: Flecha izquierda</li> <li><code>\"ui_up\"</code>: Flecha arriba</li> <li><code>\"ui_down\"</code>: Flecha abajo</li> <li><code>\"ui_accept\"</code>: Barra espaciadora</li> </ul> </li> </ol> <p>De esta forma, tu juego responder\u00e1 a los controles b\u00e1sicos de movimiento y acci\u00f3n.</p>"},{"location":"movement/#script-movimiento","title":"Script Movimiento","text":"<p>Ya podemos comenzar a crear el c\u00f3digo de nuestro juego. Para ello vamos a comenzar a crear un script para la escena jugador; asociado al nodo principal.</p>"},{"location":"movement/#anadir-un-script-al-nodo-player","title":"A\u00f1adir un Script al Nodo Player","text":"<p>Vamos a asociar un script al nodo <code>Player</code> de tipo <code>CharacterBody2D</code> que creamos en la escena <code>Player</code>, sigue estos pasos:</p> <ol> <li>Selecciona el nodo <code>Player</code> en el panel de la escena.</li> <li>Haz clic en el bot\u00f3n Adjuntar script (\u00edcono de hoja con un signo \"+\") en la parte superior del editor.</li> <li>En la ventana que aparece, aseg\u00farate de que el campo Inherit est\u00e9 configurado como <code>CharacterBody2D</code>.</li> <li>Elige la ubicaci\u00f3n y el nombre del archivo del script (por ejemplo, <code>player.gd</code>).</li> <li>Haz clic en Crear.</li> </ol> <p>Esto crear\u00e1 y asociar\u00e1 un nuevo script al nodo <code>Player</code>. Ahora puedes comenzar a programar el comportamiento del jugador dentro de este script.</p> <p>Ahora podemos ir al modo Script (en la parte superior), para trabajar con GDScript.</p>"},{"location":"movement/#gdscript","title":"GDScript","text":"<p>GDScript es el lenguaje de programaci\u00f3n principal de Godot, dise\u00f1ado espec\u00edficamente para facilitar el desarrollo de videojuegos. Es un lenguaje de alto nivel, din\u00e1mico y con una sintaxis similar a Python, lo que lo hace f\u00e1cil de aprender y utilizar.</p>"},{"location":"movement/#caracteristicas-principales-de-gdscript","title":"Caracter\u00edsticas principales de GDScript","text":"<ul> <li>Sintaxis sencilla: Inspirada en Python, lo que permite escribir c\u00f3digo de forma clara y concisa.</li> <li>Integraci\u00f3n total con Godot: Permite acceder y manipular todos los nodos, se\u00f1ales y recursos del motor de manera directa.</li> <li>Tipado din\u00e1mico (opcionalmente est\u00e1tico): Puedes declarar variables sin especificar su tipo, aunque tambi\u00e9n es posible usar tipado est\u00e1tico para mayor seguridad.</li> <li>Alto rendimiento: Est\u00e1 optimizado para funcionar eficientemente dentro del motor Godot.</li> <li>Soporte para se\u00f1ales: Facilita la comunicaci\u00f3n entre nodos mediante el sistema de se\u00f1ales propio de Godot.</li> </ul> <p>GDScript es ideal para scripts de l\u00f3gica de juego, control de escenas, animaciones y cualquier funcionalidad personalizada que requiera tu proyecto.</p> <p>Vamos a crear nuestro primer Script; ver\u00e1s que en la pantalla aparece:</p> <pre><code>extends CharacterBody2D\n</code></pre> <p>Esto indica que extiende de ese tipo de nodo (que corresponde al nodo principal asociado a este script).</p> <p>Vamos a escribir el siguiente fragmento.</p> <pre><code>\n@export var speed = 300\n\nfunc  _process(delta: float) -&gt; void:\n    var dir = Vector2.ZERO\n    if Input.is_action_pressed(\"ui_right\"):\n        dir.x+=1\n    if Input.is_action_pressed(\"ui_left\"):\n        dir.x -=1\n    if Input.is_action_pressed(\"ui_up\"):\n        dir.y-=1\n    if Input.is_action_pressed(\"ui_down\"):\n        dir.y +=1\n\n    velocity = dir.normalized()* speed\n    move_and_slide()\n\n</code></pre> <p>Warning</p> <p>Cuidado!! al igual que otros lenguajes de script como python, gdscript utiliza tabulaciones o espacios para indentar y gestionar el c\u00f3digo por lo que ten cuidado al copiar y pegar.</p>"},{"location":"movement/#instanciar-escena","title":"Instanciar Escena","text":"<p>Otra de las caracter\u00edsticas de Godot es el poder usar nodos como escenas instanciadas. Vamos a a\u00f1adir una escena <code>player</code> a la escena <code>jugador</code>.</p> <p>Sigue estos pasos:</p> <ol> <li>Abre la escena <code>main</code> en el editor de Godot.</li> <li>Haz clic en el bot\u00f3n Instanciar escena (\u00edcono de cadena o enlace) en la parte superior del panel de la escena.</li> <li>Selecciona la escena <code>player.tscn</code> y haz clic en Abrir.</li> <li>Ver\u00e1s que el nodo <code>Player</code> aparece como hijo en el \u00e1rbol de nodos de la escena <code>main</code>.</li> <li>Ajusta la posici\u00f3n del nodo <code>Player</code> si es necesario, usando las herramientas de mover en el editor.</li> </ol> <p>De esta forma, el jugador estar\u00e1 presente en la escena principal y podr\u00e1s controlar su movimiento cuando ejecutes el juego.</p> <p>Ya podemos probar nuestro juego y ver como la nave se mueve.</p>"},{"location":"nodes/","title":"Nodos","text":"<p>Una vez vistas las escenas, vamos a pasar a ver que son los nodos.</p>"},{"location":"nodes/#nodo-en-godot","title":"Nodo en Godot","text":"<p>Un Nodo en Godot es la unidad fundamental de la estructura de una escena. Cada nodo representa un objeto con una funcionalidad espec\u00edfica, como puede ser mostrar gr\u00e1ficos, reproducir sonidos, manejar l\u00f3gica de juego, detectar colisiones, entre otros. Los nodos se organizan jer\u00e1rquicamente en un \u00e1rbol de nodos, donde cada nodo puede tener uno o varios nodos hijos, permitiendo as\u00ed la composici\u00f3n y reutilizaci\u00f3n de funcionalidades.</p>"},{"location":"nodes/#caracteristicas-principales-de-un-nodo","title":"Caracter\u00edsticas principales de un Nodo:","text":"<ul> <li>Jerarqu\u00eda: Los nodos pueden anidarse unos dentro de otros, formando una estructura de \u00e1rbol. Esto permite que los nodos hijos hereden transformaciones y comportamientos de sus nodos padres.</li> <li>Escenas: Una escena en Godot es, en esencia, un \u00e1rbol de nodos. Las escenas pueden ser instanciadas y reutilizadas en otras escenas, facilitando la modularidad y organizaci\u00f3n del proyecto.</li> <li>Tipos de nodos: Godot proporciona una amplia variedad de nodos predefinidos, como <code>Node2D</code> para objetos en 2D, <code>Spatial</code> para objetos en 3D, <code>Control</code> para interfaces de usuario, entre otros.</li> <li>Ciclo de vida: Los nodos tienen m\u00e9todos especiales como <code>_ready()</code>, <code>_process()</code>, y <code>_physics_process()</code> que permiten ejecutar c\u00f3digo en momentos espec\u00edficos del ciclo de vida del nodo.</li> <li>Propiedades y se\u00f1ales: Los nodos pueden tener propiedades configurables y emitir se\u00f1ales para comunicar eventos a otros nodos.</li> </ul> <p>En resumen, los nodos son los bloques de construcci\u00f3n esenciales en Godot, permitiendo crear desde simples objetos hasta complejas estructuras de juego mediante su combinaci\u00f3n y organizaci\u00f3n jer\u00e1rquica.</p>"},{"location":"req/","title":"Requisitos para Godot","text":"<p>Para utilizar Godot Engine, es recomendable cumplir con los siguientes requisitos m\u00ednimos:</p> <ul> <li>Sistema operativo: Windows 7/8/10/11 (64 bits), macOS 10.12+ o cualquier distribuci\u00f3n moderna de Linux (64 bits).</li> <li>Procesador: CPU de 64 bits (x86_64 o ARM64).</li> <li>Memoria RAM: 4 GB como m\u00ednimo (se recomienda 8 GB para proyectos medianos o grandes).</li> <li>Tarjeta gr\u00e1fica: Compatible con OpenGL 3.3 o superior. Para mejores resultados, se recomienda soporte para Vulkan (Godot 4).</li> <li>Almacenamiento: Al menos 1 GB de espacio libre para la instalaci\u00f3n del editor, m\u00e1s espacio adicional para proyectos y recursos.</li> </ul> <p>Note</p> <p>Los requisitos pueden variar seg\u00fan la complejidad del proyecto y las caracter\u00edsticas utilizadas. Para desarrollo en dispositivos m\u00f3viles o exportaci\u00f3n a otras plataformas, pueden requerirse herramientas adicionales.</p>"},{"location":"resources/","title":"Recursos","text":"<ul> <li>https://godotengine.org/es/.</li> <li>Todo Godot.</li> <li>Make Classic Games.</li> </ul>"},{"location":"respawn_enemies/","title":"Respawn Enemigos","text":"<p>Vamos a hacer que aparezcan enemigos en nuestro juego; para ello entra en juego los llamados <code>Timers</code>.</p>"},{"location":"respawn_enemies/#timer-en-godot","title":"Timer en Godot","text":"<p>Un Timer en Godot es un nodo que permite ejecutar acciones despu\u00e9s de un intervalo de tiempo determinado o de forma repetitiva a intervalos regulares. Es \u00fatil para programar eventos temporizados, como retrasos, animaciones, enfriamientos de habilidades, o cualquier l\u00f3gica que requiera esperar un tiempo espec\u00edfico antes de ejecutarse. El Timer puede configurarse para que se repita autom\u00e1ticamente o se detenga tras una sola ejecuci\u00f3n, y emite se\u00f1ales como <code>timeout</code> cuando el tiempo ha transcurrido.</p> <p>En la escena prinicpal, a\u00f1adimos anteriormente un Timer; que podemos configurar con la siguiente configuraci\u00f3n:</p> <ul> <li>AutoStart: <code>true</code>.</li> <li>Wait Time: <code>1.5s</code>.</li> </ul> <p>Para ello, seleccionaremos la escena <code>main</code> y seleccionamos el nodo <code>timer</code>; mostrando las propiedades en el inspector de la derecha.</p>"},{"location":"respawn_enemies/#senales","title":"Se\u00f1ales","text":"<p>Una vez hemos a\u00f1adido y configurado el nodo Timer, podemos utilizar las se\u00f1ales correspondientes. Godot se basa mucho en la utilizaci\u00f3n de se\u00f1ales que son eventos que permiten intercambiar informaci\u00f3n entre nodos a trav\u00e9s de estas llamadas.</p> <p>Para ver las se\u00f1ales de un nodo, podemos usar en el inspector, la pesta\u00f1a <code>nodo</code> que aparecer\u00e1 la lista de se\u00f1ales disponibles para establecer una funci\u00f3n para recibir la informaci\u00f3n de dicha se\u00f1al.</p> <p>Vamos a usar el nodo <code>Timer</code> dentro de la escena <code>main</code> y hacer doble click en la se\u00f1al timeout. Nos aparecer\u00e1 un dialogo confirmando la nueva funci\u00f3n.</p> <p>La funci\u00f3n tendr\u00e1 el siguiente c\u00f3digo:</p> <pre><code>func _on_enemy_timer_timeout() -&gt; void:\n    var enemy = enemy_scene.instantiate()\n    enemy.position = Vector2(randf()*640,-50)\n    enemy.add_to_group(\"enemy\")\n    add_child(enemy)\n</code></pre> <p>Sin embargo, si ejecutamos este script nos dar\u00e1 un error diciendo que no existe <code>enemy_scene</code>; eso es por que tenemos que a\u00f1adir una <code>packet_scene</code>.</p> <p>A\u00f1adiremos el siguiente c\u00f3digo justo antes de crear la funci\u00f3n:</p> <pre><code>@export var enemy_scene: PackedScene\n\n</code></pre> <p>Esto nos permitir\u00e1 usar el editor para a\u00f1adir una escena en el inspector. Para ello hacemos click en el bot\u00f3n de la derecha y seleccionamos <code>enemy.tscn</code>.</p> <p>Una vez hecho esto ya podremos ejecutar el juego y ver como los enemigos aparecen.</p>"},{"location":"scenes/","title":"Escenas","text":"<p>En Godot, una escena es una colecci\u00f3n de nodos organizados jer\u00e1rquicamente que representan una parte funcional del juego, como un personaje, un nivel, una interfaz o cualquier otro elemento. Las escenas pueden contener otras escenas, lo que permite reutilizar y organizar el proyecto de manera modular.</p>"},{"location":"scenes/#como-se-utilizan-las-escenas","title":"\u00bfC\u00f3mo se utilizan las escenas?","text":"<ul> <li>Creaci\u00f3n: Puedes crear una nueva escena desde el editor de Godot, a\u00f1adiendo nodos seg\u00fan las necesidades de tu juego.</li> <li>Instanciaci\u00f3n: Una escena puede ser instanciada dentro de otra, permitiendo reutilizar componentes y facilitar el desarrollo.</li> <li>Edici\u00f3n: Cada escena se puede editar de forma independiente, lo que mejora la organizaci\u00f3n y el mantenimiento del proyecto.</li> <li>Cambio de escenas: Es posible cambiar entre escenas durante la ejecuci\u00f3n del juego usando scripts, por ejemplo, para pasar de un men\u00fa principal a un nivel.</li> </ul> <p>Las escenas son fundamentales en Godot, ya que permiten estructurar el juego de manera flexible y eficiente.</p> <p>Las escenas normalmente tienen extensi\u00f3n .tscn.</p>"},{"location":"scenes/#crear-una-escena","title":"Crear una Escena","text":"<p>Para crear una escena en Godot, sigue estos pasos:</p> <ol> <li>Abre el editor de Godot y haz clic en Escena &gt; Nueva Escena o usa el atajo <code>Ctrl+N</code>.</li> <li>A\u00f1ade nodos a la escena seg\u00fan lo que necesites (por ejemplo, un nodo <code>Node2D</code>, <code>Sprite2D</code>, <code>Control</code>, etc.).</li> <li>Organiza los nodos en la jerarqu\u00eda arrastr\u00e1ndolos y configurando sus propiedades.</li> <li>Guarda la escena con Escena &gt; Guardar Escena o <code>Ctrl+S</code>, eligiendo un nombre descriptivo y una ubicaci\u00f3n en tu proyecto.</li> </ol> <p>Consejo: Es recomendable guardar cada escena en una carpeta espec\u00edfica (por ejemplo, <code>scenes/</code>) para mantener el proyecto organizado.</p>"},{"location":"shotemup/","title":"SHot Em Up","text":"<p>En este apartado, ya vamos a comenzar a ver como realizar nuestro juego; para este taller, vamos a crear un shot'emup cl\u00e1sico (MataMarcianos); este juego tendr\u00e1 los elementos cl\u00e1sicos de este tipo de juegos.</p> <p>Info</p> <p>Puedes encontrar los recursos que vamos a necesitar para nuestro juego en el siguiente enlace: Recursos Juego. Descomprime estos ficheros dentro de la carpeta de nuestro proyecto.</p> <p>Veamos nuestro juego:</p> <p></p> <p>Podemos ver en la captura, algunos elementos de un juego de este tipo:</p> <ul> <li>Jugador: La nave del jugador que es la que controlaremos.</li> <li>Enemigo: Una o varias naves enemigas que van a por nosotros.</li> <li>Disparos: Aunque no se muestra en la pantalla, vamos a necesitar disparar balas para acabar con las naves enemigas por lo tanto necesitarmeos a\u00f1adir uno o varios disparos.</li> </ul> <p>Cada uno de estos elementos es en si mismo una escena del juego; adem\u00e1s de a\u00f1adir una escena contenedora de estos llamada escena principal.</p> <p>Por lo tanto, nuestro juego necesitar\u00e1 crear las siguientes escenas:</p> <ul> <li>Jugador: Que controlar\u00e1 el jugador de este juego.</li> <li>Enemigo: tendr\u00e1 todos los elementos necesarios para gestionar un enemigo.</li> <li>Disparo: Cada disparo que realice el jugador para acabar con los enemigos.</li> <li>Main: Es la escena principal que contendr\u00e1 las instancias de las otras escenas u otros nodos.</li> </ul> <p>Cada escena, contendr\u00e1 uno o varios nodos y tendr\u00e1 asociados diferentes scripts.</p>"},{"location":"shots/","title":"Disparos","text":"<p>Ya queda poco para terminar nuestro juego; vamos a a\u00f1adir la capacidad de disparar a nuestro jugador. Pero en primer lugar, vamos a crear la escena <code>bullet.tscn</code> que contendr\u00e1 lo necesario para un disparo del jugador.</p> <ol> <li> <p>Crear el Nodo Principal</p> <ul> <li>Haz clic derecho en el panel de nodos y selecciona A\u00f1adir Nodo.</li> <li>Busca y selecciona <code>Area2D</code> como nodo principal de la escena.</li> </ul> </li> <li> <p>A\u00f1adir un Sprite2D como Hijo</p> <ul> <li>Selecciona el nodo <code>Area2D</code>.</li> <li>Haz clic en A\u00f1adir Hijo y elige <code>Sprite2D</code>.</li> <li>En el inspector, asigna la textura <code>bullet.png</code> al Sprite2D.</li> </ul> </li> <li> <p>A\u00f1adir un CollisionShape2D como Hijo</p> <ul> <li>Selecciona el nodo <code>Area2D</code>.</li> <li>Haz clic en A\u00f1adir Hijo y elige <code>CollisionShape2D</code>.</li> <li>En el inspector, selecciona una forma adecuada (por ejemplo, <code>CircleShape2D</code>) y aj\u00fastala al tama\u00f1o de la bala.</li> </ul> </li> </ol> <p>El \u00e1rbol de nodos deber\u00eda verse as\u00ed:</p> <pre><code>Area2D\n\u251c\u2500\u2500 Sprite2D (textura: bullet.png)\n\u2514\u2500\u2500 CollisionShape2D\n</code></pre>"},{"location":"shots/#script","title":"Script","text":"<p>Vamos a crear el Script asociado al <code>Area2D</code>. Para que la bala se borre cuando llegue al borde superior.</p> <p>El Script contendr\u00e1 el siguiente c\u00f3digo inicialmente:</p> <pre><code>\nextends Area2D\n\n@export var speed= 500\n\nfunc _process(delta: float) -&gt; void:\n    position.y -= speed * delta\n    if position.y &lt; -10:\n        queue_free()\n</code></pre>"},{"location":"shots/#disparo","title":"Disparo","text":"<p>Por \u00faltimo, vamos a crear un disparo cuando pulsemos espacio, desde el propio jugador. Por ello, vamos a volver a la escena <code>player</code>; para ampliar la funci\u00f3n <code>_process</code>.</p> <p>En primer lugar, vamos a a\u00f1adir debajo de la velocidad, una nueva propiedad que ser\u00e1 una packet_scene; esta escena nos va a permitir crear disparos en tiempo de ejecuci\u00f3n.</p> <pre><code>@export var speed = 300\n@export var bullet_scene: PackedScene\n</code></pre> <p>Note</p> <p>Recuerda solo a\u00f1adir la \u00faltima l\u00ednea del anterior fragmento.</p> <p>Una vez a\u00f1adida la propiedad, en el editor estableceremos la propiedad <code>bullet_scene</code> a la escena <code>bullet.tscn</code>.</p> <p>Por \u00faltimo, en el script de player, ampliamos la funci\u00f3n <code>_process</code> con el siguiente fragmento:</p> <pre><code>\n    if Input.is_action_just_pressed(\"ui_accept\"):\n        var bullet = bullet_scene.instantiate()\n        bullet.position = position\n        bullet.add_to_group(\"bullet\")\n        get_parent().add_child(bullet)\n</code></pre> <p>Si todo ha ido bien, el script de <code>player</code> deber\u00eda quedar as\u00ed:</p> <pre><code>extends CharacterBody2D\n\n@export var speed = 300\n@export var bullet_scene: PackedScene\n\nfunc  _process(delta: float) -&gt; void:\n    var dir = Vector2.ZERO\n    if Input.is_action_pressed(\"ui_right\"):\n        dir.x+=1\n    if Input.is_action_pressed(\"ui_left\"):\n        dir.x -=1\n    if Input.is_action_pressed(\"ui_up\"):\n        dir.y-=1\n    if Input.is_action_pressed(\"ui_down\"):\n        dir.y +=1\n\n    velocity = dir.normalized()* speed\n    move_and_slide()\n\n    if Input.is_action_just_pressed(\"ui_accept\"):\n        var bullet = bullet_scene.instantiate()\n        bullet.position = position\n        bullet.add_to_group(\"bullet\")\n        get_parent().add_child(bullet)\n</code></pre>"}]}